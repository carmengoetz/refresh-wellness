{# Displays aggregate wellness stats #}

{% extends 'base.html.twig' %}

{% block title %}Nearby Wellness Professionals{% endblock %}

{% block stylesheets %}
{{ parent() }}




{% endblock %}

{% block javascripts %}

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.js"></script>
    <script src="../../../scripts/chart_scripts.js"></script>
    <script type="text/javascript">
    var params = "{{ params }}";
    </script>
    <script type="text/javascript">
        





        //Perform AJAX call to retrieve data
        //Update charts
        function updateCharts() {


                var url = '';
                var type = '';
                var val = '';
                if (params != '')
                {

                        var invalid = false;
                        //Update switch - only two aggregate cases
                        var isOrg = false;
                        switch (params)
                        {
                           
                            case 'patientAll':
                                url = "../patientAll";
                                break;
                            case 'orgMemberAll':
                                url = "../orgMemberAll";
                                isOrg = true;
                                break;
                            default:
                                invalid = true;
                                break;
                        }

                        if (!invalid) {
                            //show pineapple
                            $("#loading").show();
                            $.ajax(
                                {
                                    url: url,
                                    type: 'GET',
                                    dataType: 'json',

                                    //Pass in page number we want to see

                                    success: function (jsonResponse) {
                                        //Hide pineapple
                                        $("#loading").hide();
                                        //Deal with the response
                                        if (jsonResponse.status == "success") {
                                                    var type = '';
                                            if (isOrg)
                                            {
                                                $(".loadedName").text(jsonResponse.data.OrgName);
                                                type = jsonResponse.data.members;
                                                $(".total").text(type.length + " members");
                                            }
                                            else
                                            {
                                                $(".loadedName").text(jsonResponse.data.WellnessPro);
                                                type = jsonResponse.data.patients;
                                                $(".total").text(type.length + " patients");
                                            }
                                            if (type.length != 0) {
                                                $("#chartOneContainer").show();
                                                $("#chartTwoContainer").show();
                                                $(".errorMsg").hide();

                                                var totals = [0, 0, 0, 0];
                                                var subTotals = [0, 0, 0, 0];
                                                var dateStats = [];


                                                for (j = 0; j <type.length; j++){
                                                //Loop through ALL stats and add them appropriately - will need nested loop
                                                    for (i = 0; i <type[j].stats.length; i++) {

                                                        statDate = new Date(type[j].stats[i].date);

                                                        //For every statistics object we get, loop through the date/stats 2D array and find the row with the date that matches
                                                        dateFound = false;
                                                        //console.log(dateStats.length);
                                                        for (k = 0; k < dateStats.length; k++) {
                                                            if (dateStats[k][0].getTime() == statDate.getTime()) {

                                                                //Add the various stats to the totals for this date
                                                                dateStats[k][1] +=type[j].stats[i].mood;
                                                                dateStats[k][2] +=type[j].stats[i].energy;
                                                                dateStats[k][3] +=type[j].stats[i].sleep;
                                                                dateStats[k][4] +=type[j].stats[i].thoughts;


                                                                //Add one to total for this date
                                                                dateStats[k][5] += 1;
                                                                dateFound = true;
                                                            }
                                                        }
                                                        //console.log(dateFound);
                                                        //If not found, add new row to table
                                                        if (!dateFound) {
                                                            
                                                            dateStats.push([statDate, 0, 0, 0, 0, 0]);
                                                            
                                                            dateStats[dateStats.length - 1][1] +=type[j].stats[i].mood;
                                                            dateStats[dateStats.length - 1][2] +=type[j].stats[i].energy;
                                                            dateStats[dateStats.length - 1][3] +=type[j].stats[i].sleep;
                                                            dateStats[dateStats.length - 1][4] +=type[j].stats[i].thoughts;

                                                            //Add one to total for this date
                                                            dateStats[dateStats.length - 1][5] += 1;
                                                        }
                                                        //Sort the array by date
                                                        dateStats.sort(function (a, b) {
                                                            return b[0] - a[0];
                                                        });
                                                    }
                                                    //Then, once we're done all the stats we average each cell in the table by the total column to get the average for each stat for each date
                                                            }
                                                    dateStatsAvg = [];

                                                    statsAvgForPieChart = [0, 0, 0, 0];
                                                    totalNumStats = 0;

                                                    generateCharts();

                                                    for (k = 0; k < dateStats.length; k++)
                                                    {

                                                        //Adding up all the stats and avergaing each type for each date
                                                        dateStatsAvg.push([dateStats[k][0], dateStats[k][1] / dateStats[k][5], dateStats[k][2] / dateStats[k][5], dateStats[k][3] / dateStats[k][5], dateStats[k][4] / dateStats[k][5]]);
                                                        //Add on the total for this row to the grand total for the final average
                                                        totalNumStats += dateStats[k][5];
                                                        //Add each stat type to the grand total array
                                                        statsAvgForPieChart[0] += dateStats[k][1];
                                                        statsAvgForPieChart[1] += dateStats[k][2];
                                                        statsAvgForPieChart[2] += dateStats[k][3];
                                                        statsAvgForPieChart[3] += dateStats[k][4];

                                                        //Push new data point objects to the various stat arrays
                                                        dataLine.mood.data.push({ x: dateStatsAvg[k][0], y: dateStatsAvg[k][1] });
                                                        dataLine.energy.data.push({ x: dateStatsAvg[k][0], y: dateStatsAvg[k][2] });
                                                        dataLine.sleep.data.push({ x: dateStatsAvg[k][0], y: dateStatsAvg[k][3] });
                                                        dataLine.thoughts.data.push({ x: dateStatsAvg[k][0], y: dateStatsAvg[k][4] });
                                                    }
                                                
                                                    
                                                    //Then, sum all the columns for each stat and average by sum of totals column and push to pie chart data array
                                                            wellnessChartAvg.data.datasets[0].data = [statsAvgForPieChart[0] / totalNumStats, statsAvgForPieChart[1] / totalNumStats, statsAvgForPieChart[2] / totalNumStats, statsAvgForPieChart[3] / totalNumStats];
                  
                                                //Add to array after aggregating
                                                wellnessChart.data.datasets.push(dataLine.mood);
                                                wellnessChart.data.datasets.push(dataLine.energy);
                                                wellnessChart.data.datasets.push(dataLine.sleep);
                                                wellnessChart.data.datasets.push(dataLine.thoughts);

                                                wellnessChart.update();
                                                wellnessChartAvg.update();

                                                //Update total fields

                                            }
                                            else
                                            {
                                                
                                                $("#chartOneContainer").hide();
                                                $("#chartTwoContainer").hide();
                                                $('#jsonError').html("Sorry, no statistics available to view.");
                                                $(".errorMsg").show();
                                            }

                                        }
                                        //status is failure
                                        else {
                                            $("#chartOneContainer").hide();
                                                $("#chartTwoContainer").hide();
                                            $('#jsonError').html(jsonResponse.message);
                                            $(".errorMsg").show();
                                        }
                                    }
                                });
                        }
                        else
                        {
                                $("#chartOneContainer").hide();
                                                $("#chartTwoContainer").hide();
                                $('#jsonError').html("Invalid parameters");
                                $(".errorMsg").show();
}
                    
                }
                else
                {
                        $("#chartOneContainer").hide();
                                                $("#chartTwoContainer").hide();
                                $('#jsonError').html("Invalid address");
                                $(".errorMsg").show();
}




            }



        $(function () {
            
                $("#chartOneContainer").hide();
    $("#chartTwoContainer").hide();
                    updateCharts();
                    });
        //Load the page and set up the charts
        
    </script>
{% endblock %}

{% block body %}
  

    <div id="mainWrapper" class="col-md-12 col-lg-7">
        <!-- Add heading for page -->
        <div id="headerText" class="row rounded bg-light mb-3 p-2 pl-3">
        <h1>Wellness Statistics</h1>
            </div>
        <!-- Add graph of stats using chart.js -->
        <div id="chartOneContainer" class="row rounded bg-light mb-3 p-2 ">
        <div class="chartheader col-xs-12 col-sm-12">
            <p class="username">
                <h2 class="loadedName"></h2>
                <div class="total"></div>
            </p>
     
        </div>
         <div class="chart-container col-xs-12 col-sm-12">

            <canvas id="wellnessChart" height="500" ></canvas>
        </div>

            </div>
        <div id="chartTwoContainer" class="row rounded bg-light mb-3 p-2 ">
        <div class="chartheader col-xs-12 col-sm-12">
            <p class="username">
                <h2 class="loadedName"></h2>
                <div class="total"></div>
            </p>
        </div>
        
        <div class="chart-container col-xs-12 col-sm-12">
 
            <canvas id="wellnessChartAvg" height="400" ></canvas>
        </div>
            </div>
        <!-- Add toggles for turning on/off the various wellnesses -->


        <!-- Add message indicating success or failure (hidden) -->
        <p class="status"></p>
        <!-- Add error message if needed -->
        <div class="errorMsg row rounded bg-danger mb-3 p-2" id="jsonError"></div>
    </div>

{% endblock %}